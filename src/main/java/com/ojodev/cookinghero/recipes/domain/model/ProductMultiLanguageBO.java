package com.ojodev.cookinghero.recipes.domain.model;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * product with multiple languages associated.
 *
 */
@ToString
@EqualsAndHashCode
@Getter
public class ProductMultiLanguageBO {

    private String id; // Generated by name.language = default

    private List<DescriptiveNameBO> names;  // Mandatory

    private ProductStatusEnumBO status;

    private ProductMultiLanguageBO(Builder builder) {
        this.id = builder.getId();
        this.names = builder.names;
        this.status = builder.status;
    }


    public static class Builder extends IdentifiableBO{

       private List<DescriptiveNameBO> names;

        private LanguageEnumBO defaultLanguage;

        private ProductStatusEnumBO status;

        public Builder(List<DescriptiveNameBO> names, LanguageEnumBO defaultLanguage, ProductStatusEnumBO status) {
            super("");
            this.defaultLanguage = defaultLanguage;
            this.names = new ArrayList<>();
            this.names(names);
            this.status = status;
        }

        public Builder name(DescriptiveNameBO newName) {
            validateName(newName);
            if (languageExists(newName)) {
                replaceName(newName);
            } else {
                addName(newName);
            }
            if (languageIsDefault(newName)) {
                setId(newName.getSingular());
            }
            return this;
        }

        public Builder status(ProductStatusEnumBO status) {
            this.status = status;
            return this;
        }

        private boolean languageExists(DescriptiveNameBO newName) {
            return this.names.stream().filter(n ->  n.getLanguage() == newName.getLanguage()).findAny().isPresent();
        }

        private Builder replaceName(DescriptiveNameBO newName) {
            this.names.stream().filter(n -> n.getLanguage() == newName.getLanguage()).forEach(n ->
            {
                n.setSingular(newName.getSingular());
                n.setPlural(newName.getPlural());
            });
            return this;
        }

        private Builder addName(DescriptiveNameBO newName) {
            this.names.add(newName);
            return this;
        }

        private boolean languageIsDefault(DescriptiveNameBO newName) {
            return defaultLanguage != null && defaultLanguage == (newName.getLanguage());
        }


        public Builder names(List<DescriptiveNameBO> names) {
            names.stream().forEach(n -> name(n));
            return this;
        }

        public ProductMultiLanguageBO build() {
            ProductMultiLanguageBO productMultiLanguageBO = new ProductMultiLanguageBO(this);
            validateProductObject(productMultiLanguageBO);
            return productMultiLanguageBO;
        }

        private void validateName(DescriptiveNameBO name) {
            if (name == null || StringUtils.isEmpty(name.getSingular()) || StringUtils.isEmpty(name.getPlural())) {
                throw new IllegalArgumentException("Names needs to include singular and plural fields");
            }
        }


        private void validateProductObject(ProductMultiLanguageBO productMultiLanguageBO) {
            if (productMultiLanguageBO.getNames() == null || productMultiLanguageBO.getNames().size() == 0) {
                throw new IllegalArgumentException("Product needs to include at least one name and language fields");
            }
            if (productMultiLanguageBO.getNames().stream().filter(ln -> defaultLanguage.equals(ln.getLanguage())).count() == 0) {
                throw new IllegalArgumentException("Product needs to include default language name: " + defaultLanguage);
            }
        }


    }

}
